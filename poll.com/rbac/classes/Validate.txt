<?php
// проверка на прохождение валидации
// проверка на существование элементов
// проверка инпута register.php
class Validate {
    private $_passed = false,
            $_errors = array(),
            $_db = null;

    public function __construct() {
        $this->_db = DB::getInstance();
    }

    // получает параметры для проверки из $validation в register.php
    public function check($source, $items = array()) {
        foreach($items as $item => $rules) { // в $item присвоятся 'password' etc., в $rules - 'required' etc.
            foreach($rules as $rule => $rule_value) {
                
                $value = trim($source[$item]); // присваиваем даннные от формы, прошедшие проверку на соответствие правилам в $validation
                
                // валидация данных из $value по сабмиту
                if($rule === 'required' && empty($value)) {
                    $this->addError("{$item} is required");
                   } // else if(!empty($value)) { // если поля заполнены, проверяет на соответствие правилам $rule
                //     switch($rule) {
                //         case 'min':
                //             if(strlen($value) < $rule_value) {
                //                 $this->addError("{$item} must be a minimum of {$rule_value} characters");
                //             }
                //         break;
                //         case 'max':

                //         break;
                //         case 'matches':

                //         break;
                //         case 'unique':

                //         break;
                //     }
                // }

                }

            }
        }

        if(empty($this->_errors)) {
            $this->_passed = true;
        }

        return $this;
    }

    private function addError($error) {
        $this->_errors[] = $error;
    }

    public function errors() {
        return $this->_errors;
    }

    public function passed() {
        return $this->_passed;
    }

}
